

.. _actions_brett_canon_12_july_2013:

==============================
Actions Brett Canon july 2013
==============================

::

    Brett Cannon <brett@python.org>
    à:   Donald Stufft <donald@stufft.io>
    cc:  distutils-sig <Distutils-Sig@python.org>,
    Vinay Sajip <vinay_sajip@yahoo.co.uk>
    date:    12 juillet 2013 21:25
    objet:   Re: [Distutils] PEP 439 and pip bootstrap updated


::

    Adding packaging tools beyond bootstrapping pip at this point in the game 
    is IMO a huge mistake. 
    If what Nick has said and PEPs are not appropriate for things that don't 
    have a module in the standard lib well that's fine I guess.


You misunderstand what I mean. I'm just saying that *if* anything were to go 
into the stdlib it would only be to have code which implements a PEP in the 
stdlib to prevent everyone from re-implementing a standard.

You misunderstand what I mean. I'm just saying that *if* anything were to go 
into the stdlib it would only be to have code which implements a PEP in the 
stdlib to prevent everyone from re-implementing a standard.
 

    I just won't worry about trying to write PEPs :)


No, the PEPs are important to prevent version skew and make sure everyone is 
on the same page. 

And that's also what a module in the stdlib would do; make sure everyone is on 
the same page in terms of semantics by using a single code base.

I mean I wouldn't expect anything more than maybe code parsing the JSON 
metadata that does some validation and parsing version numbers that can support 
comparisons and verifying platform requirements; that's it. 

Stuff that every installation tool will need to do in order to follow the 
PEPs properly. 

And it wouldn't go in until everyone was very happy with the PEPs and ready to 
commit to code enshrining it in the stdlib. 

**Otherwise I hope distlib moves into PyPA and everyone who develops 
installation tools, etc. uses that library**.

  
