
.. index::
   pair: PEP; 0440

.. _python_pep_0440:

============================================================================
pep 0440 Version Identification and Dependency Specification
============================================================================

.. seealso::

   - http://www.python.org/dev/peps/pep-0440/
   - https://bitbucket.org/pypa/setuptools/commits/dcd552da643c4448056de84c73d56da6d70769d5
   - :ref:`python_pep_0426`


.. contents::
   :depth: 3


Donald Stufft committed dcd552d 2014-09-05 Implement PEP 440 by using the packaging library
============================================================================================

.. seealso::

   - https://bitbucket.org/pypa/setuptools/commits/dcd552da643c4448056de84c73d56da6d70769d5



https://bitbucket.org/pypa/setuptools/commits/457971eb247cca2d5029db8312f0bcc3792a8aa2
=======================================================================================


::


	-* Implement PEP 440 within pkg_resources and setuptools. This will cause some
	-  versions to no longer be installable without using the ``===`` escape hatch.
	+* Implement `PEP 440 <http://legacy.python.org/dev/peps/pep-0440/>`_ within
	+  pkg_resources and setuptools. This change
	+  deprecates some version numbers such that they will no longer be installable
	+  without using the ``===`` escape hatch. See `the changes to test_resources
    +  <https://bitbucket.org/pypa/setuptools/commits/dcd552da643c4448056de84c73d56da6d70769d5#chg-setuptools/tests/test_resources.py>`_
	+  for specific examples of version numbers and specifiers that are no longer
	+  supported. Setuptools now "vendors" the `packaging
	+  <https://github.com/pypa/packaging>`_ library.




Quote from Nick Coglan
=======================

.. seealso::

   - http://mail.python.org/pipermail/distutils-sig/2013-June/021315.html

::

    > * What direct references provide which cannot be provided by the other version
    >   clauses together with (separately) URIs or paths for where archives can be
    >   found? The fact that the format of this clause is so different from all the
    >   others suggests that it doesn't really belong with them.

I'm guided by the fact that pip and similar tools all allow direct references 
in requirement files. 
This is aimed directly at providing a standard, command line friendly notation 
for such references, rather than requiring the information be conveyed out of 
band.

Most of PEP 426/440 are about the shiny, happy packaging utopia we're trying 
to create. This feature is aimed squarely at the messy world of the system integrator.


Last-Modified:	2013-06-20 19:24:19 +1000 (Thu, 20 Jun 2013)
=============================================================

Abstract
========

This PEP describes a scheme for identifying versions of Python software 
distributions, and declaring dependencies on particular versions.

This document addresses several limitations of the previous attempt at a 
standardised approach to versioning, as described in :ref:`PEP 345 <python_pep_0345>` 
and :ref:`PEP 386 <python_pep_0386>`.
