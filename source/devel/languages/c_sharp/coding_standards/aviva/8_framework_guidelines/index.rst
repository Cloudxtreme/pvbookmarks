
======================
8 Framework Guidelines
======================


AV2201 Use C# type aliases instead of the types from the System namespace
==========================================================================

For instance, use object instead of Object, string instead of String, and int
instead of Int32.

These aliases have been introduced to make the primitive types a first class
citizen of the C# language, so use them accordingly,

**Exception**
    When referring to static members of those types, it is custom to use the
    full CLS name, e.g. Int32.Parse() instead of int.Parse().


AV2205 Properly name identifiers referring to localized resources
=================================================================


The guidelines in this topic apply to localizable resources such as error
messages and menu text.

-  Use Pascal casing in resource keys.
-  Provide descriptive rather than short identifiers. Keep them concise where
   possible, but don’t sacrifice readability.
-  Use only alphanumeric characters in naming resources.


AV2207 Don’t hardcode strings that change based on the deployment
=================================================================

Examples include connection strings, server addresses, etc.

Use Resources, the ConnectionStrings property of the ConfigurationManager class,
or the Settings class generated by Visual Studio.


AV2210 Build with the highest warning level
===========================================

Configure the development environment to use Warning Level 4 for the C# compiler,
and enable the option Treat warnings as errors.

This allows the compiler to enforce the highest possible code quality.


AV2211 Avoid suppressing specific compiler warnings
====================================================


AV2215 Properly fill the attributes of the AssemblyInfo.cs file
===============================================================


Ensure that the attributes for the company name, description, copyright
statement, version, etc. are filled.

One way to ensure that version and other fields that are common to all
assemblies have the same values, is to move the corresponding attributes out
of the AssemblyInfo.cs into a SolutionInfo.cs file that is shared by all
projects within the solution.


AV2220 Avoid LINQ for simple expressions
========================================

Rather than::

    var query = from item in items where item.Length > 0;


prefer using the extension methods from the System.Linq namespace::

    var query = items.Where(i => i.Length > 0);


Since LINQ queries should be written out over multiple lines for readability,
the second example is a bit more readable.



.. _av2221:

AV2221 Use Lambda expressions instead of delegates
==================================================

Lambda expressions have been introduced in C# 3.0 and provide a **much more
elegant alternative for anonymous delegates**.

So instead of::

    Customer c = Array.Find(customers,
                            delegate(Customer c) { return c.Name == “Tom”;}
                            );

use an Lambda expression::

    Customer c = Array.Find(customers, c => c.Name == “Tom”);


Or even better::

    var customer = customers.Where(c => c.Name == “Tom”);


AV2230 Only use the dynamic keyword when talking to a dynamic object
=====================================================================

The dynamic keyword has been introduced for working with dynamic languages.

Using it introduces a serious performance bottleneck because the compiler has
to generate some complex Reflection code.

Use it only for calling methods or members of a dynamically created instance
(using the Activator) class as an alternative to Type.GetProperty() and
Type.GetMethod(), or for working with COM Interop types.



