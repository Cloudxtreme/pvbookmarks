
.. index::
   pair: software engineeering; Fluent interface

.. _av1020:

===========================================================
AV1020 Avoid bidirectional dependencies
===========================================================


Having bidirectional dependencies between classes means that two classes know
about each other public memers or rely on each otherâ€™s internal behavior.

Refactoring or replacing one of those two classes requires changes on both
parties and may involve a lot of unexpected work.

The most obvious way of breaking that dependency is introducing an interface
for one of the classes and using dependency injection.

**Exception**

Domain models such as defined in Domain Driven Design tend to occasionally
involve bidirectional associations that model real-life associations.
In those cases, I would make sure they are really necessary, but if they are,
keep them in.


