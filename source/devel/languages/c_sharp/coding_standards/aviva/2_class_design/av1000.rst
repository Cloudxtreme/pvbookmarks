
.. index::
   pair: software engineeering; Single Responsibility Principle

.. _av1000:

==========================================================
AV1000 A class or interface should have a single purpose
==========================================================

A class or interface should have a **single purpose** within the system it
participates in.

In general, a class is either representing a primitive type like an email or
ISBN number, an abstraction of some business concept, a plain data structure or
responsible for orchestrating the interaction between other classes.

It is never a combination of those.

This rule is widely known as the :term:`Single Responsibility Principle`, one of
the :term:`S.O.L.I.D.` principles.


**Tip**
    A class with the word ``And`` in it is an obvious violation of this rule.


**Tip**
    Use :term:`Design Patterns` to communicate the intent of a class. If you
    canâ€™t assign a single design pattern to a class, chances are that it is
    doing more than one thing.

.. note:: If you create a class representing a primitive type you can greatly
   simplify it usage by making it immutable.

