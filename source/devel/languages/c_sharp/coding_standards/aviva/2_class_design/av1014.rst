
.. index::
   pair: software engineeering; Fluent interface

.. _av1014:


===========================================================
AV1014 Avoid exposing the objects an object depends on
===========================================================

If you find yourself writing code like this then you might be violating the
:term:`Law of Demeter`::

    someObject.SomeProperty.GetChild().Foo()


An object should not expose any other classes it depends on because callers
may misuse that exposed property or method to access the object behind it.

By doing so, you allow calling code to become coupled to the class you are
using, and thereby limiting the chance you can easily replace it in a future stage.

.. note:: Using a class that is designed using the `Fluent Interface` pattern
   does seem to violate this rule, but is in reality something else.
   It simply returns itself so that method chaining is allowed.

**Exception**
    Inversion of Control or Dependency Injection frameworks often require you
    to expose a dependency as a public property.
    As long as this property is not used for anything else than dependency
    injection, then it is not considered a violation.


